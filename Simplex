#include <iostream>
#include <vector>
#include <fstream>

using namespace std;
//êëàññ ïðîñòûõ äðîáåé
class prime
{
private:
int chisl;
int znam;
int gcd(int a, int b)
{
while (a != b)
{
if (a > b)
{
a -= b;
}
else
{
b -= a;
}
}
return a;
}
public:
void set(int a, int b)
{
chisl = a;
znam = b;
}
int getchisl()
{
return chisl;
}
int getznam()
{
return znam;
}
prime()
{
set(0, 1);
}
prime(int a, int b)
{
if(b == 0)
{
cout << "ERROR 0 ZNAM" << endl;
exit(1);
}
if(a == 0)
{
set(0, 1);
}
else
{
int sign = 1;
if(a < 0)
{
sign *= -1;
a *= -1;
}
if(b < 0)
{
sign *= -1;
b *= -1;
}

int tmp = gcd(a, b);
set(a / tmp * sign, b / tmp);
}
}

prime operator*(const prime& b)
{
return prime(this->getchisl() * b.chisl, this->getznam() * b.znam);
}
prime operator/(const prime& b)
{
return prime(this->getchisl() * b.znam, this->getznam() * b.chisl);
}
prime& operator+=(const prime& b)
{
prime c(this->getchisl() * b.znam + b.chisl * this->getznam(), this->getznam() * b.znam);
*this = c;
return *this;
}
prime& operator-=(const prime& b)
{
prime c(this->getchisl() * b.znam - b.chisl * this->getznam(), this->getznam() * b.znam);
*this = c;
return *this;
}
prime& operator/=(const prime& b)
{
prime c(this->getchisl() * b.znam, b.chisl * this->getznam());
*this = c;
return *this;
}
friend ostream& operator<<(ostream &out, const prime &a);
};

ostream& operator<<(ostream& strm, const prime& a)
{
if(a.znam == 1)
{
strm << a.chisl;
}
else
{
strm << a.chisl << "/" << a.znam;
}
return strm;
}

prime operator+(prime a, int b)
{
return prime(b * a.getznam() + a.getchisl(), a.getznam());
}

prime operator*(int b, prime a)
{
return prime(b * a.getchisl(), a.getznam());
}
//âûâîä ðàñøèðåííîé ìàòðèöû
void print_matrix(prime *a, int n, int m)
{
cout << "1\t";
for (int i = 1; i < m; i++)
{
	cout << "x" << i << "\t";
}
cout << endl;
for(int i = 0; i < n; i++)
{
	for(int j = 0; j < m; j++)
	{
		cout << a[i * m + j] << "\t";
	}
	cout << endl;
}
cout << endl;
}

void printSimplex(prime *a, prime *so, prime *z, int n, int m, int t)
{
int nul = 0;
int ed = 0;
int bas_stolb = 0;
int iswrite = 0;

cout << "Òàáëèöà " << t << ":" << endl;
cout << "Á.Ï\t1\t";
for (int i = 1; i < m; i++)
{
	cout << "x" << i << "\t";
}
cout << "ÑÎ\t" << endl;

for(int i = 0; i < n; i++)
{
	for(int j = 1; j < m; j++)
	{
		if(a[i * m + j].getchisl() == 1 && a[i * m + j].getznam() == 1 && iswrite == 0)
		{
		for(int k = 0; k < n; k++)
		{
			if(a[k * m + j].getchisl() == 0)
			{
			nul++;
			}
			
			if(a[k * m + j].getchisl() == 1)
			{
			ed++;
			bas_stolb = j;
			}
		}
		if(nul == n - 1 && ed == 1)
		{
			cout << "x" << bas_stolb << "\t";
		iswrite = 1;
		bas_stolb = 0;
		nul = 0;
		ed = 0;
		}
		}
		
	if(iswrite == 1)
	{
	for(int h = 0; h < m; h++)
	{
		cout << a[i * m + h] << "\t";
	}
	cout << so[i] << endl;
	iswrite = 0;
	}
	
	nul = 0;
	ed = 0;
	}
}

cout << endl << "Z\t";
for(int i = 0; i < m; i++)
{
	cout << z[i] << "\t";
}
cout << endl;
}
//Æîðäàíà-Ãàóññà
void gauss(prime *a, int n, int m, int* bas, int* svob)
{
m:int y = 0;
prime *res = new prime(0, 1);

for (int i = 0; i < n; i++)
{
	if (a[i * m].getchisl() < 0)
	{
		for (int j = 0; j < m; j++)
		{
		a[i * m + j] = -1 * a[i * m + j];
		}
	}
}

print_matrix(a, n, m);

for(int i = 0; i < n; i++)
{
y = bas[i];
*res = a[i * m + y];
	if (res->getchisl() == 0)
		{
		for (int j = i + 1; j < n; j++)
		{
			if (a[j * m + y].getchisl() != 0)
			{
			for (int k = 0; k < m; k++)
			{
			a[i * m + k] += a[j * m + k];
			}

			break;
			}
		}
		}

*res = a[i * m + y];

if (res->getchisl() == 0)
{
		cout << "Íåò ðåøåíèÿ " << endl;
	exit(1);
}

for(int j = 0; j < m; j++)
{
	a[i * m + j] /= *res;
}

*res /= *res;

for(int j = 0; j < n; j++)
{
	if(i == j) 
	{
	continue;
	}
	
	for(int k = 0; k < m; k++)
	{

	if(y == k)
	{
	continue;
	}
	
	a[j * m + k] -= ((a[j * m + y] * a[i * m + k]) / *res);
	}
}

for(int j = 0; j < n; j++)
{
	if(i == j) 
	{
		continue;
	}

a[j * m + y] = prime(0, 1); 

}

print_matrix(a, n, m);

}

int index = 0;
int nul = 0;
int ed = 0;
for (int i = 0; i < n; i++)
{
	if (a[i * m].getchisl() < 0)
	{
	for (int j = 0; j < m; j++)
	{
	if (a[i * m + j].getchisl() == 1 && a[i * m + j].getznam() == 1)
	{
		for (int k = 0; k < n; k++)
		{
		if (a[k * m + j].getchisl() == 0)
		{
			nul++;
		}
	
		if (a[k * m + j].getchisl() == 1)
		{
			index = j;
			ed++;
		}
	
		}
		
		if (nul == n - 1 && ed == 1)
		{
		break;
		}
	}

	}

	}
}

int k = 0;
for (int i = 0; i < n; i++)
{
	if (bas[i] == index)
	{

	cout << "Ðåøåíèå íå îïîðíîå " << endl;

	int temp = bas[i];

	bas[i] = svob[k];
	svob[k] = temp;
	k++;

		if (k == m - n - 1)
		{
		k = 0;
		}

	goto m;

	}
}

}
//ïåðâè÷íûé ðàñ÷åò êîýôôèöèåíòîâ z-ñòðîêè
void zCount(prime *a, prime *z, int n, int m, int *bas, int *svob, int *cof)
{
	
for (int i = 0; i < m; i++)
{
	z[i] = prime(0, 1);
}

int flagBas = 0;
for(int i = 0; i < m; i++)
{
	flagBas = 0;
	if(cof[i] != 0)
	{
	for (int j = 0; j < n; j++)
	{
		if (bas[j] == i)
		{

		flagBas = 1;
		
		for (int k = 0; k < m - n - 1; k++)
		{
		z[svob[k]] += cof[i] * a[j * m + svob[k]];
		}

		z[0] += cof[i] * a[j * m];
		}

	}
	
	}
	
if (flagBas == 0)
{
	z[i] = z[i] + (cof[i] * -1);
}
}

}
//ïîñòðîåíèå ñèìïëåêñ-òàáëèöû
int simplexTable(prime *a, prime *z, int n, int m, int maxminflag)
{
	
prime *max = new prime(0, 1);
prime *min = new prime(9999, 1);
prime *res = new prime(0, 1);

prime *so = new prime[n];

int maxIndex = 0;
int minIndex = 0;
int flagOptPlan = 0;
int basStolb = 0;
int t = 0;
int nil = 0;
int count = 0;

for(int i = 0; i < n; i++)
{
	so[i] = prime(0, 1);
}

while(1)
{

for (int i = 0; i < n; i++)
{
	if (a[i * m].getchisl() < 0)
	{
	printSimplex(a, so, z, n, m, t);
	cout << "Ïëàíå íå îïîðåí" << endl;
	exit(1);
	}
}

nil = 0;
flagOptPlan = 0;
t++;

for(int i = 0; i < n; i++)
{
	so[i] = prime(0, 1);
}

*max = z[1];
maxIndex = 1;

for(int i = 1; i < m; i++)
{
	if (maxminflag)
	{
		if (z[i].getchisl() > 0)
		{
			flagOptPlan = 1;
		}
	
		if ((z[i].getchisl() * max->getznam() > max->getchisl() * z[i].getznam()))
		{
		*max = z[i];
		maxIndex = i;
		}
	}
	else
	{
		
	if (z[i].getchisl() < 0)
	{
	flagOptPlan = 1;
	}
	
	if ((z[i].getchisl() * max->getznam() < max->getchisl() * z[i].getznam()))
	{
	*max = z[i];
	maxIndex = i;
	}
	
	}
}

for (int i = 1; i < m; i++)
{

if (z[i].getchisl() == 0)
{
	nil++;
}

}

if (nil > n)
{

	for (int i = 1; i < m; i++)
	{
		
	if (z[i].getchisl() == 0)
	{
		for (int j = 0; j < n; j++)
		{
			if (a[j * m + i].getchisl() != 0 && a[j * m + i].getchisl() != 1)
			{
			maxIndex = i;
			}
		
		}
	}
	
	}

	count++;//ïîäñ÷åò êîëè÷åñòâà âðåøèí ìíîãîãðàííèêà ðåøåíèé

}

if((flagOptPlan == 0 && nil == n) || count == 2)
{

	printSimplex(a, so, z, n, m, t);
	cout << "Ïëàí îïòèìàëåí " << endl;
	return 0;

}

for(int i = 0; i < n; i++)
{
	if (a[i * m + maxIndex].getchisl() <= 0)
	{	
		continue;
	}
	else
	{
	so[i] = a[i * m] / a[i * m + maxIndex];
	}
	
	
	if((so[i].getchisl() * min->getznam() < min->getchisl() * so[i].getznam()) && so[i].getchisl() > 0)
	{
		*min = so[i];
		minIndex = i;
	}
}

printSimplex(a, so, z, n, m, t);

if (min->getchisl() == 9999 && min->getznam() == 1)
{
	cout << "Íåò ðåøåíèÿ " << endl;
	exit(1);
}

if (nil == n)
{
	cout << "Ïëàí íå îïòèìàëåí " << endl;
}
else
{
	cout << "Áåñêîíå÷íî ìíîãî ðåøåíèé " << endl;
}

*res = a[minIndex * m + maxIndex];
cout << "Ðàçðåøàþùèé ýëåìåíò - " << *res << endl;

int nul = 0;
int ed = 0;

for(int i = 0; i < m; i++)
{
	if(a[minIndex * m + i].getchisl() == 1 && a[minIndex * m + i].getznam() == 1)
	{
		for(int j = 0; j < n; j++)
		{

			if(a[j * m + i].getchisl() == 0)
			{
				nul++;
			}
			
			if(a[j * m + i].getchisl() == 1)
			{
				basStolb = j;
				ed++;
			}
		}

	if(nul == n - 1 && ed == 1)
	{
	break;
	}
	
	}
}

for(int i = 0; i < n; i++)
{
	if(i == minIndex)
	{
		continue;
	}
	
	for(int j = 0; j < m; j++)
	{
		if(j == maxIndex)
		{
		continue;
		}
		
	a[i * m + j] -= ((a[i * m + maxIndex] * a[minIndex * m + j]) / *res);
	
	}

}

for(int i = 0; i < m; i++)
{
	if(i == maxIndex)
	{
		continue;
	}
z[i] -= ((a[minIndex * m + i] * z[maxIndex]) / *res);
}

z[maxIndex] = prime(0, 1);

for(int i = 0; i < m; i++)
{
a[minIndex * m + i] /= *res;
}

for(int i = 0; i < n; i++)
{
if(i == basStolb)
{
a[i * m + maxIndex] = prime(1, 1);
}
else
{
a[i * m + maxIndex] = prime(0, 1);
}
}

max = new prime(0, 1);
min = new prime(9999, 1);

maxIndex = 0;
minIndex = 0;
basStolb = 0;
}
}
//âû÷èñëåíèå ñâîáîäíûõ ïåðåìåííûõ
void svob_count(int *bas, int *svob, int n, int m)
{
	
int k = 0;
int flag = 0;

for (int i = 1; i < m; i++)
{
	for (int j = 0; j < n; j++)
	{
	
	if (bas[j] == i)
	{
		flag = 1;
	}

	}
	
if (flag == 0)
{
	svob[k] = i;
	k++;
	
	if (k == m - n - 1)
	{
		break;
	}

}

flag = 0;

}

}

int main()
{


setlocale(LC_ALL,"RUS");

int n;
int m;
int maxminflag;

ifstream fin("file1.txt");

fin >> n >> m;

prime* a = new prime[m * n];
prime* z = new prime[m];

int* cof = new int[m];
int* svob = new int[m - n - 1];
int* bas = new int[n];

int **matr = new int*[n];
for (int i = 0; i < n; i++)
{
	matr[i] = new int[m];
}

for (int i = 0; i < n; i++)
{
	for (int j = 0; j < m; j++)
	{
		fin >> matr[i][j];
	}
}

for (int i = 0; i < m; i++)
{
	fin >> cof[i];
}

for (int i = 0; i < n; i++)
{
	fin >> bas[i];
}

svob_count(bas, svob, n, m);

fin >> maxminflag;

for (int i = 0; i < n; i++)
{
	for (int j = 0; j < m; j++)
	{
	a[i * m + j] = prime(matr[i][j], 1);
	}
	
}


print_matrix(a, n , m);
gauss(a, n, m, bas, svob);
zCount(a, z, n, m, bas, svob, cof);
simplexTable(a, z, n, m, maxminflag);

return 0;
}
